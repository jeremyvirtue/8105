C51 COMPILER V9.53.0.0   KEYBOARD                                                          07/14/2020 15:32:53 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN .\Objects\KeyBoard.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\KeyBoard.c OMF2 ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User
                    -;.\User\Drive) DEBUG PRINT(.\Listings\KeyBoard.lst) OBJECT(.\Objects\KeyBoard.obj)

line level    source

   1          
   2          #include "KeyBoard.h"
   3          #include "System.h" 
   4          #include "kt_0646m.h"
   5           
   6          KeyData   keys;   
   7          void KeyPress(void);
   8          void KeyRelease(void);
   9          void KeyContinued(void);
  10          void Twins(void);
  11           
  12          
  13          
  14          /**       扫描按键状态
  15          * @brief  
  16          * @param  
  17          * @param  
  18          * @retval 
  19          */
  20          void KeyScan(void)
  21          {
  22   1              u8 i;  
  23   1              for (i=0;i<KEY_COUNT;i++)
  24   1              {
  25   2                      keys.key[i].now=MASK_EMPTY;
  26   2              } 
  27   1              if (!KEY_POWER)
  28   1              {
  29   2                      keys.key[KEY_1].now=KEY_DOWN; 
  30   2              }  
  31   1              if (!KEY2)
  32   1              {
  33   2                      keys.key[KEY_2].now=KEY_DOWN; 
  34   2              }  
  35   1              if (!KEY3)
  36   1              {
  37   2                      keys.key[KEY_3].now=KEY_DOWN; 
  38   2              }  
  39   1                      if (!KEY4)
  40   1              {
  41   2                      keys.key[KEY_4].now=KEY_DOWN; 
  42   2              }  
  43   1      //      if(keys.key[KEY_1].now==MASK_EMPTY )
  44   1      //      {       //松开时恢复状态，组合按键
  45   1      
  46   1      //      }
  47   1      //      else
  48   1      //      {
  49   1      //               
  50   1      //      }
  51   1              
  52   1              for (i=0;i<KEY_COUNT;i++)
  53   1              {
  54   2                      keys.key[i].press=keys.key[i].now & (keys.key[i].now^keys.key[i].continued);
C51 COMPILER V9.53.0.0   KEYBOARD                                                          07/14/2020 15:32:53 PAGE 2   

  55   2                      keys.key[i].release=keys.key[i].now ^ keys.key[i].press ^ keys.key[i].continued;
  56   2                      keys.key[i].continued=keys.key[i].now;
  57   2                      if (keys.key[i].continued==0x00)
  58   2                        keys.key[i].duration =0;
  59   2              }
  60   1              
  61   1              if(!keys.key[KEY_1].now &&!keys.key[KEY_2].now &&\
  62   1                              !keys.key[KEY_3].now && !keys.key[KEY_4].now)
  63   1              {
  64   2                      keys.twins_tim = 0;
  65   2                      keys.twins_flag = 0;
  66   2              }
  67   1              else
  68   1              {
  69   2                      LedLightApi();
  70   2                      keys.mute_flag = 1;
  71   2              }
  72   1              
  73   1              Twins(); 
  74   1              if(!keys.twins_flag)
  75   1              {
  76   2                       KeyPress();  
  77   2                       KeyRelease();  
  78   2                       KeyContinued();  
  79   2              }
  80   1       
  81   1      }
  82          
  83          void KeyMute(void)
  84          {
  85   1              if(keys.mute>0 )
  86   1              {
  87   2                      keys.mute--;
  88   2                      if(keys.mute == 0 )
  89   2                      {
  90   3                              KT_WirelessMicTx_MuteSel(AUDIO_UNMUTE);
  91   3                      }
  92   2              }
  93   1      }
  94          
  95          
  96          /**       按下
  97          *
  98          *
  99          */
 100          void KeyPress(void)
 101          { 
 102   1              if (keys.key[KEY_1].press)// 
 103   1              { 
 104   2                      keys.key_num =  K1_P;
 105   2              } 
 106   1              if (keys.key[KEY_2].press)// 
 107   1              { 
 108   2                      keys.key_num = K2_P;
 109   2              } 
 110   1              if (keys.key[KEY_3].press)// 
 111   1              { 
 112   2                      keys.key_num = K3_P;
 113   2              } 
 114   1              if (keys.key[KEY_4].press)// 
 115   1              { 
 116   2                      keys.key_num = K4_P;
C51 COMPILER V9.53.0.0   KEYBOARD                                                          07/14/2020 15:32:53 PAGE 3   

 117   2              } 
 118   1                       
 119   1      }
 120          /**       释放
 121          *
 122          *
 123          */
 124          void KeyRelease(void)
 125          { 
 126   1              if (keys.key[KEY_1].release)// 
 127   1              { 
 128   2                      keys.key_num = K1_R; 
 129   2              }  
 130   1              if (keys.key[KEY_2].release)// 
 131   1              { 
 132   2                      keys.key_num = K2_R; 
 133   2              }  
 134   1              if (keys.key[KEY_3].release)// 
 135   1              { 
 136   2                      keys.key_num = K3_R; 
 137   2              }  
 138   1              if (keys.key[KEY_4].release)// 
 139   1              { 
 140   2                      keys.key_num = K4_R; 
 141   2              }  
 142   1               
 143   1      }
 144          
 145           
 146          // 
 147          /**       按下不放
 148          *
 149          *
 150          */
 151          void KeyContinued(void)
 152          {  
 153   1              if (keys.key[KEY_1].continued)// 
 154   1              {
 155   2                      if (keys.key[KEY_1].duration<KEY_DURATION_TIME*10)
 156   2                              keys.key[KEY_1].duration++;
 157   2                      if(keys.key[KEY_1].duration==KEY_DURATION_TIME/3)
 158   2                      {
 159   3                              keys.key_num = K1_C0_3S;
 160   3                      } 
 161   2                      if(keys.key[KEY_1].duration==KEY_DURATION_TIME)
 162   2                      {
 163   3                              keys.key_num = K1_C1S;
 164   3                      } 
 165   2                      if(keys.key[KEY_1].duration==KEY_DURATION_TIME * 7)
 166   2                      {
 167   3                              keys.key_num = K1_C10S;
 168   3                      } 
 169   2              } 
 170   1              if (keys.key[KEY_2].continued)// 
 171   1              {
 172   2                      if (keys.key[KEY_2].duration<KEY_DURATION_TIME*10)
 173   2                              keys.key[KEY_2].duration++;
 174   2                      if(keys.key[KEY_2].duration==KEY_DURATION_TIME/2)
 175   2                      {
 176   3                              keys.key_num = K2_C0_5S;
 177   3                      } 
 178   2                      if(keys.key[KEY_2].duration==4)
C51 COMPILER V9.53.0.0   KEYBOARD                                                          07/14/2020 15:32:53 PAGE 4   

 179   2                      {
 180   3                              keys.key_num = K2_C80MS;
 181   3                      } 
 182   2              } 
 183   1              if (keys.key[KEY_3].continued)// 
 184   1              {
 185   2                      if (keys.key[KEY_3].duration<KEY_DURATION_TIME*10)
 186   2                              keys.key[KEY_3].duration++;
 187   2                      if(keys.key[KEY_3].duration==KEY_DURATION_TIME/2)
 188   2                      {
 189   3                              keys.key_num = K3_C0_5S;
 190   3                      } 
 191   2                      if(keys.key[KEY_3].duration==4)
 192   2                      {
 193   3                              keys.key_num = K3_C80MS;
 194   3                      } 
 195   2              } 
 196   1              if (keys.key[KEY_4].continued)// 
 197   1              {
 198   2                      if (keys.key[KEY_4].duration<KEY_DURATION_TIME*10)
 199   2                              keys.key[KEY_4].duration++;
 200   2                      if(keys.key[KEY_4].duration==KEY_DURATION_TIME)
 201   2                      {
 202   3                              keys.key_num = K4_C0_5S;
 203   3                      } 
 204   2              } 
 205   1       
 206   1               
 207   1      }
 208          
 209          void Twins()
 210          {
 211   1              if(keys.key[KEY_1].now && keys.key[KEY_2].now)
 212   1              {
 213   2                      keys.twins_flag = 1;
 214   2                      keys.twins_tim++;
 215   2                      if(keys.twins_tim == KEY_DURATION_TIME)
 216   2                      {
 217   3                              keys.key_num = K1_K2_TWINS;
 218   3                      }
 219   2              }
 220   1      }
 221          
 222          
 223           
 224          
 225          /**       执行按键命令
 226          *   0^0=0,0^1=1   1^0=1,1^1=0
 227          *
 228          */
 229          void KeyExecute(void)
 230          {       
 231   1              u8 i;
 232   1        for (i=0;i<KEY_COUNT;i++)
 233   1              {
 234   2          keys.key[i].press=keys.key[i].now & (keys.key[i].now^keys.key[i].continued);
 235   2          keys.key[i].release=keys.key[i].now ^ keys.key[i].press ^ keys.key[i].continued;
 236   2          keys.key[i].continued=keys.key[i].now;
 237   2          if (keys.key[i].continued==MASK_EMPTY)
 238   2            keys.key[i].duration =0;
 239   2              }
 240   1       
C51 COMPILER V9.53.0.0   KEYBOARD                                                          07/14/2020 15:32:53 PAGE 5   

 241   1              
 242   1              KeyPress(); 
 243   1              KeyRelease();
 244   1              KeyContinued(); 
 245   1      }
 246          
 247          void KeyInit(void)
 248          {               
 249   1              u8 i;
 250   1              for (i=0;i<KEY_COUNT;i++)
 251   1              {
 252   2          keys.key[i].now=0;
 253   2          keys.key[i].press=0;
 254   2          keys.key[i].release=0;
 255   2          keys.key[i].continued=0;
 256   2          keys.key[i].duration =0;
 257   2              }
 258   1       
 259   1              GPIO_SET(xP5MDL,GPIO_UI,0);// 
 260   1              GPIO_SET(P1MDL,GPIO_UI,1);// 
 261   1              GPIO_SET(P1MDL,GPIO_UI,2);// 
 262   1              GPIO_SET(P1MDL,GPIO_UI,3);// 
 263   1      }
 264          
 265          
 266          void keyContinedClean(void)
 267          {
 268   1              keys.key[KEY_3].duration = 0;
 269   1              keys.key[KEY_2].duration = 0;
 270   1      }
 271          
 272           void LedLight(void)
 273          {
 274   1       xGPIODS0 |= 0x01;   
 275   1       xGPIODS3 |= 0xF0;  
 276   1       xGPIODS4 |= 0x06;  
 277   1      }
 278          
 279          void LedBlack(void)
 280          {
 281   1       xGPIODS0 &= 0xFE; 
 282   1       xGPIODS3 &= 0x0F;
 283   1       xGPIODS4 &= 0xF9;
 284   1      }
 285          
 286          void LedLightApi()
 287          {
 288   1                      LedLight();
 289   1                      keys.light = 20;
 290   1      }
 291          
 292          
 293           
 294          
 295          void LedLampDelay()
 296          {
 297   1              if(keys.light>0)
 298   1              {
 299   2                      keys.light--;
 300   2                      if(keys.light == 0)
 301   2                      {
 302   3                              LedBlack();
C51 COMPILER V9.53.0.0   KEYBOARD                                                          07/14/2020 15:32:53 PAGE 6   

 303   3                      }
 304   2              }
 305   1      }
 306          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    828    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
