C51 COMPILER V9.53.0.0   KEYBOARD                                                          04/28/2020 09:38:57 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN .\Objects\KeyBoard.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE User\KeyBoard.c OMF2 ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User
                    -;.\User\Drive) DEBUG PRINT(.\Listings\KeyBoard.lst) OBJECT(.\Objects\KeyBoard.obj)

line level    source

   1          
   2          #include "KeyBoard.h"
   3          #include "System.h" 
   4          #include "kt_0646m.h"
   5           
   6          KeyData   keys;   
   7          void KeyPress(void);
   8          void KeyRelease(void);
   9          void KeyContinued(void);
  10          void Twins(void);
  11           
  12          
  13          
  14          /**       扫描按键状态
  15          * @brief  
  16          * @param  
  17          * @param  
  18          * @retval 
  19          */
  20          void KeyScan(void)
  21          {
  22   1              u8 i;  
  23   1              for (i=0;i<KEY_COUNT;i++)
  24   1              {
  25   2                      keys.key[i].now=MASK_EMPTY;
  26   2              } 
  27   1              if (!KEY_POWER)
  28   1              {
  29   2                      keys.key[KEY_1].now=KEY_DOWN; 
  30   2              }  
  31   1              if (!KEY2)
  32   1              {
  33   2                      keys.key[KEY_2].now=KEY_DOWN; 
  34   2              }  
  35   1              if (!KEY3)
  36   1              {
  37   2                      keys.key[KEY_3].now=KEY_DOWN; 
  38   2              }  
  39   1                      if (!KEY4)
  40   1              {
  41   2                      keys.key[KEY_4].now=KEY_DOWN; 
  42   2              }  
  43   1      //      if(keys.key[KEY_1].now==MASK_EMPTY )
  44   1      //      {       //松开时恢复状态，组合按键
  45   1      
  46   1      //      }
  47   1      //      else
  48   1      //      {
  49   1      //               
  50   1      //      }
  51   1              
  52   1              for (i=0;i<KEY_COUNT;i++)
  53   1              {
  54   2                      keys.key[i].press=keys.key[i].now & (keys.key[i].now^keys.key[i].continued);
C51 COMPILER V9.53.0.0   KEYBOARD                                                          04/28/2020 09:38:57 PAGE 2   

  55   2                      keys.key[i].release=keys.key[i].now ^ keys.key[i].press ^ keys.key[i].continued;
  56   2                      keys.key[i].continued=keys.key[i].now;
  57   2                      if (keys.key[i].continued==0x00)
  58   2                        keys.key[i].duration =0;
  59   2              }
  60   1              
  61   1              if(!keys.key[KEY_1].now &&!keys.key[KEY_2].now &&\
  62   1                              !keys.key[KEY_3].now && !keys.key[KEY_4].now)
  63   1              {
  64   2                      keys.twins_tim = 0;
  65   2                      keys.twins_flag = 0;
  66   2              }
  67   1              else
  68   1              {
  69   2                      LedLight();
  70   2                      keys.light = 10;
  71   2                              keys.mute_flag = 1;
  72   2              }
  73   1              
  74   1              Twins(); 
  75   1              if(!keys.twins_flag)
  76   1              {
  77   2                       KeyPress();  
  78   2                       KeyRelease();  
  79   2                       KeyContinued();  
  80   2              }
  81   1       
  82   1      }
  83          
  84          void KeyMute(void)
  85          {
  86   1              if(keys.mute>0 )
  87   1              {
  88   2                      keys.mute--;
  89   2                      if(keys.mute == 0 )
  90   2                      {
  91   3                              KT_WirelessMicTx_MuteSel(AUDIO_UNMUTE);
  92   3                      }
  93   2              }
  94   1      }
  95          
  96          
  97          /**       按下
  98          *
  99          *
 100          */
 101          void KeyPress(void)
 102          { 
 103   1              if (keys.key[KEY_1].press)// 
 104   1              { 
 105   2                      keys.key_num =  K1_P;
 106   2              } 
 107   1              if (keys.key[KEY_2].press)// 
 108   1              { 
 109   2                      keys.key_num = K2_P;
 110   2              } 
 111   1              if (keys.key[KEY_3].press)// 
 112   1              { 
 113   2                      keys.key_num = K3_P;
 114   2              } 
 115   1              if (keys.key[KEY_4].press)// 
 116   1              { 
C51 COMPILER V9.53.0.0   KEYBOARD                                                          04/28/2020 09:38:57 PAGE 3   

 117   2                      keys.key_num = K4_P;
 118   2              } 
 119   1                       
 120   1      }
 121          /**       释放
 122          *
 123          *
 124          */
 125          void KeyRelease(void)
 126          { 
 127   1              if (keys.key[KEY_1].release)// 
 128   1              { 
 129   2                      keys.key_num = K1_R; 
 130   2              }  
 131   1              if (keys.key[KEY_2].release)// 
 132   1              { 
 133   2                      keys.key_num = K2_R; 
 134   2              }  
 135   1              if (keys.key[KEY_3].release)// 
 136   1              { 
 137   2                      keys.key_num = K3_R; 
 138   2              }  
 139   1              if (keys.key[KEY_4].release)// 
 140   1              { 
 141   2                      keys.key_num = K4_R; 
 142   2              }  
 143   1               
 144   1      }
 145          
 146           
 147          // 
 148          /**       按下不放
 149          *
 150          *
 151          */
 152          void KeyContinued(void)
 153          {  
 154   1              if (keys.key[KEY_1].continued)// 
 155   1              {
 156   2                      if (keys.key[KEY_1].duration<KEY_DURATION_TIME*10)
 157   2                              keys.key[KEY_1].duration++;
 158   2                      if(keys.key[KEY_1].duration==KEY_DURATION_TIME/3)
 159   2                      {
 160   3                              keys.key_num = K1_C0_3S;
 161   3                      } 
 162   2                      if(keys.key[KEY_1].duration==KEY_DURATION_TIME)
 163   2                      {
 164   3                              keys.key_num = K1_C1S;
 165   3                      } 
 166   2                      if(keys.key[KEY_1].duration==KEY_DURATION_TIME * 7)
 167   2                      {
 168   3                              keys.key_num = K1_C10S;
 169   3                      } 
 170   2              } 
 171   1              if (keys.key[KEY_2].continued)// 
 172   1              {
 173   2                      if (keys.key[KEY_2].duration<KEY_DURATION_TIME*10)
 174   2                              keys.key[KEY_2].duration++;
 175   2                      if(keys.key[KEY_2].duration==KEY_DURATION_TIME/2)
 176   2                      {
 177   3                              keys.key_num = K2_C0_5S;
 178   3                      } 
C51 COMPILER V9.53.0.0   KEYBOARD                                                          04/28/2020 09:38:57 PAGE 4   

 179   2                      if(keys.key[KEY_2].duration==4)
 180   2                      {
 181   3                              keys.key_num = K2_C80MS;
 182   3                      } 
 183   2              } 
 184   1              if (keys.key[KEY_3].continued)// 
 185   1              {
 186   2                      if (keys.key[KEY_3].duration<KEY_DURATION_TIME*10)
 187   2                              keys.key[KEY_3].duration++;
 188   2                      if(keys.key[KEY_3].duration==KEY_DURATION_TIME/2)
 189   2                      {
 190   3                              keys.key_num = K3_C0_5S;
 191   3                      } 
 192   2                      if(keys.key[KEY_3].duration==4)
 193   2                      {
 194   3                              keys.key_num = K3_C80MS;
 195   3                      } 
 196   2              } 
 197   1              if (keys.key[KEY_4].continued)// 
 198   1              {
 199   2                      if (keys.key[KEY_4].duration<KEY_DURATION_TIME*10)
 200   2                              keys.key[KEY_4].duration++;
 201   2                      if(keys.key[KEY_4].duration==KEY_DURATION_TIME)
 202   2                      {
 203   3                              keys.key_num = K4_C0_5S;
 204   3                      } 
 205   2              } 
 206   1       
 207   1               
 208   1      }
 209          
 210          void Twins()
 211          {
 212   1              if(keys.key[KEY_1].now && keys.key[KEY_2].now)
 213   1              {
 214   2                      keys.twins_flag = 1;
 215   2                      keys.twins_tim++;
 216   2                      if(keys.twins_tim == KEY_DURATION_TIME)
 217   2                      {
 218   3                              keys.key_num = K1_K2_TWINS;
 219   3                      }
 220   2              }
 221   1      }
 222          
 223          
 224           
 225          
 226          /**       执行按键命令
 227          *   0^0=0,0^1=1   1^0=1,1^1=0
 228          *
 229          */
 230          void KeyExecute(void)
 231          {       
 232   1              u8 i;
 233   1        for (i=0;i<KEY_COUNT;i++)
 234   1              {
 235   2          keys.key[i].press=keys.key[i].now & (keys.key[i].now^keys.key[i].continued);
 236   2          keys.key[i].release=keys.key[i].now ^ keys.key[i].press ^ keys.key[i].continued;
 237   2          keys.key[i].continued=keys.key[i].now;
 238   2          if (keys.key[i].continued==MASK_EMPTY)
 239   2            keys.key[i].duration =0;
 240   2              }
C51 COMPILER V9.53.0.0   KEYBOARD                                                          04/28/2020 09:38:57 PAGE 5   

 241   1       
 242   1              
 243   1              KeyPress(); 
 244   1              KeyRelease();
 245   1              KeyContinued(); 
 246   1      }
 247          
 248          void KeyInit(void)
 249          {               
 250   1              u8 i;
 251   1              for (i=0;i<KEY_COUNT;i++)
 252   1              {
 253   2          keys.key[i].now=0;
 254   2          keys.key[i].press=0;
 255   2          keys.key[i].release=0;
 256   2          keys.key[i].continued=0;
 257   2          keys.key[i].duration =0;
 258   2              }
 259   1       
 260   1              GPIO_SET(xP5MDL,GPIO_UI,0);// 
 261   1              GPIO_SET(P1MDL,GPIO_UI,1);// 
 262   1              GPIO_SET(P1MDL,GPIO_UI,2);// 
 263   1              GPIO_SET(P1MDL,GPIO_UI,3);// 
 264   1      }
 265          
 266          
 267          void keyContinedClean(void)
 268          {
 269   1              keys.key[KEY_3].duration = 0;
 270   1              keys.key[KEY_2].duration = 0;
 271   1      }
 272          
 273           void LedLight(void)
 274          {
 275   1       xGPIODS0 |= 0x01;   
 276   1       xGPIODS3 |= 0xF0;  
 277   1       xGPIODS4 |= 0x06;  
 278   1      }
 279          
 280          void LedBlack(void)
 281          {
 282   1       xGPIODS0 &= 0xFE; 
 283   1       xGPIODS3 &= 0x0F;
 284   1       xGPIODS4 &= 0xF9;
 285   1      }
 286          
 287          
 288           
 289          
 290          void LedLampDelay()
 291          {
 292   1              if(keys.light>0)
 293   1              {
 294   2                      keys.light--;
 295   2                      if(keys.light == 0)
 296   2                      {
 297   3                              LedBlack();
 298   3                      }
 299   2              }
 300   1      }
 301          

C51 COMPILER V9.53.0.0   KEYBOARD                                                          04/28/2020 09:38:57 PAGE 6   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    824    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
